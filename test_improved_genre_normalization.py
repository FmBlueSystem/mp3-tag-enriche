#!/usr/bin/env python3
"""
Script de prueba para las mejoras en normalizaci√≥n de g√©neros m√∫ltiples.
Verifica que el GenreNormalizer maneja correctamente casos como "R&B; Pop/Rock; Pop"
"""

from src.core.genre_normalizer import GenreNormalizer

def test_multi_genre_splitting():
    """Prueba la divisi√≥n de g√©neros m√∫ltiples."""
    print("üîÑ PRUEBAS DE DIVISI√ìN DE G√âNEROS M√öLTIPLES")
    print("=" * 60)
    
    test_cases = [
        "R&B; Pop/Rock; Pop",
        "Hip-Hop, R&B, Pop",
        "Rock & Roll; Metal; Blues",
        "Electronic, Dance, House Music", 
        "Pop/Rock/Alternative",
        "Drum & Bass, Electronic, Techno",
        "Jazz; Blues; Soul Music",
        "Unknown Genre XYZ; Pop; Rock",
        "Pop",
        ""
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i:2d}. Entrada: '{test_case}'")
        
        if not test_case.strip():
            print("    ‚ö†Ô∏è  Caso vac√≠o")
            continue
            
        # Probar divisi√≥n
        split_result = GenreNormalizer.split_multi_genre_string(test_case)
        print(f"    üìã Divisi√≥n: {split_result}")
        
        # Probar normalizaci√≥n completa
        normalized_result = GenreNormalizer.normalize_multi_genre_string(test_case)
        print(f"    ‚úÖ Normalizado:")
        for genre, score in normalized_result.items():
            print(f"       ‚Ä¢ {genre}: {score:.2f}")

def test_problematic_case_resolution():
    """Prueba espec√≠fica para el caso problem√°tico original."""
    print("\n\nüéØ PRUEBA ESPEC√çFICA: 'R&B; Pop/Rock; Pop'")
    print("=" * 50)
    
    problematic_case = "R&B; Pop/Rock; Pop"
    
    print(f"üì• Entrada original: '{problematic_case}'")
    
    # Divisi√≥n b√°sica
    split_genres = GenreNormalizer.split_multi_genre_string(problematic_case)
    print(f"üìã G√©neros divididos: {split_genres}")
    
    # Normalizaci√≥n individual
    print(f"üîß Normalizaci√≥n individual:")
    for genre in split_genres:
        normalized, confidence = GenreNormalizer.normalize(genre)
        print(f"   '{genre}' ‚Üí '{normalized}' (confianza: {confidence:.2f})")
    
    # Normalizaci√≥n completa con resoluci√≥n de conflictos
    final_result = GenreNormalizer.normalize_multi_genre_string(problematic_case)
    print(f"‚úÖ Resultado final optimizado:")
    for genre, score in final_result.items():
        print(f"   ‚Ä¢ {genre}: {score:.2f}")
    
    # Verificar que se resolvi√≥ el problema
    print(f"\nüìä An√°lisis de resoluci√≥n:")
    print(f"   - G√©neros originales: 3 (['R&B', 'Pop/Rock', 'Pop'])")
    print(f"   - G√©neros finales: {len(final_result)}")
    print(f"   - ¬øSe elimin√≥ duplicaci√≥n Pop?: {'S√≠' if 'Pop' not in final_result or 'Pop/Rock' not in final_result else 'No'}")
    print(f"   - ¬øSe mantuvo R&B?: {'S√≠' if 'R&B' in final_result else 'No'}")

def test_edge_cases():
    """Prueba casos extremos y especiales."""
    print("\n\nüß™ PRUEBAS DE CASOS EXTREMOS")
    print("=" * 40)
    
    edge_cases = [
        "Pop/Rock/Alternative/Electronic",  # Muchos g√©neros unidos por /
        "R&B & Soul & Funk",  # M√∫ltiples &
        "Hip-Hop; Hip Hop; Rap",  # G√©neros que se normalizan igual
        "Electronic Dance Music; EDM; Dance",  # Alias del mismo g√©nero
        "Pop; Popular Music; Pop Music",  # Variantes del mismo g√©nero
        "Unknown XYZ; Invalid ABC; Pop",  # G√©neros inv√°lidos mezclados
    ]
    
    for i, test_case in enumerate(edge_cases, 1):
        print(f"\n{i}. '{test_case}'")
        result = GenreNormalizer.normalize_multi_genre_string(test_case)
        print(f"   ‚Üí {dict(result)}")

def test_comparison_with_old_method():
    """Compara con el m√©todo de normalizaci√≥n de diccionario existente."""
    print("\n\n‚öñÔ∏è  COMPARACI√ìN CON M√âTODO TRADICIONAL")
    print("=" * 45)
    
    test_case = "R&B; Pop/Rock; Pop"
    
    # M√©todo nuevo
    new_result = GenreNormalizer.normalize_multi_genre_string(test_case)
    print(f"üÜï M√©todo nuevo: {dict(new_result)}")
    
    # Simular m√©todo tradicional (como diccionario manual)
    traditional_dict = {
        "R&B": 0.9,
        "Pop/Rock": 0.8, 
        "Pop": 0.7
    }
    old_result = GenreNormalizer.normalize_dict(traditional_dict)
    print(f"üîÑ M√©todo tradicional: {dict(old_result)}")
    
    print(f"\nüìà Mejoras detectadas:")
    print(f"   - Manejo autom√°tico de separadores: ‚úÖ")
    print(f"   - Resoluci√≥n de conflictos Pop/Pop-Rock: {'‚úÖ' if len(new_result) <= len(old_result) else '‚ùå'}")
    print(f"   - Preservaci√≥n de g√©neros importantes: {'‚úÖ' if 'R&B' in new_result else '‚ùå'}")

if __name__ == "__main__":
    print("üéµ SISTEMA DE NORMALIZACI√ìN DE G√âNEROS M√öLTIPLES - PRUEBAS")
    print("=" * 70)
    
    test_multi_genre_splitting()
    test_problematic_case_resolution()
    test_edge_cases()
    test_comparison_with_old_method()
    
    print("\n" + "=" * 70)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print("\nLas nuevas funciones est√°n integradas en GenreNormalizer:")
    print("  ‚Ä¢ split_multi_genre_string() - Divisi√≥n inteligente")
    print("  ‚Ä¢ normalize_multi_genre_string() - Normalizaci√≥n completa")
    print("\nEsas funciones pueden ser utilizadas directamente en el sistema principal.") 