#!/usr/bin/env python3
"""
Prueba del sistema integrado de an√°lisis de fusi√≥n de g√©neros.
Verifica que el GenreNormalizer maneja inteligentemente casos como "Heavy Metal; Hip-Hop; Punk Rock".
"""

from src.core.genre_normalizer import GenreNormalizer

def test_fusion_analysis_integration():
    """Prueba la integraci√≥n del an√°lisis de fusi√≥n con el normalizador."""
    print("üéµ PRUEBA DE AN√ÅLISIS DE FUSI√ìN INTEGRADO")
    print("=" * 60)
    
    test_cases = [
        "Heavy Metal; Hip-Hop; Punk Rock",
        "Jazz; Hip-Hop",
        "Rock; Electronic", 
        "Heavy Metal; Hip-Hop",
        "Classical; Death Metal",
        "Pop; Rock; Electronic",
        "Country; Blues; Folk"
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i:2d}. CASO: '{test_case}'")
        print("-" * 50)
        
        # An√°lisis de validez musical
        fusion_analysis = GenreNormalizer.analyze_genre_fusion_validity(test_case)
        print(f"üîç Validez: {fusion_analysis['validity']}")
        print(f"üìã Explicaci√≥n: {fusion_analysis['explanation']}")
        print(f"üí° Recomendaci√≥n: {fusion_analysis['recommendation']}")
        
        if 'fusion_info' in fusion_analysis:
            info = fusion_analysis['fusion_info']
            print(f"üéØ G√©nero de fusi√≥n: {info['fusion_genre']}")
            print(f"üé§ Ejemplos: {', '.join(info['examples'])}")
        
        # Normalizaci√≥n con an√°lisis de fusi√≥n
        print(f"\nüîß NORMALIZACI√ìN INTELIGENTE:")
        result = GenreNormalizer.normalize_multi_genre_string_with_fusion_analysis(test_case)
        
        # Separar an√°lisis de g√©neros
        fusion_analysis_result = result.pop('_fusion_analysis', None)
        
        print(f"üì§ G√©neros finales:")
        for genre, score in result.items():
            print(f"   ‚Ä¢ {genre}: {score:.2f}")

def test_specific_case_detailed():
    """An√°lisis detallado del caso espec√≠fico."""
    print("\n\nüéØ AN√ÅLISIS DETALLADO: Heavy Metal; Hip-Hop; Punk Rock")
    print("=" * 65)
    
    case = "Heavy Metal; Hip-Hop; Punk Rock"
    
    # An√°lisis paso a paso
    print("1Ô∏è‚É£ DIVISI√ìN DE G√âNEROS:")
    individual = GenreNormalizer.split_multi_genre_string(case)
    print(f"   {individual}")
    
    print("\n2Ô∏è‚É£ AN√ÅLISIS DE VALIDEZ MUSICAL:")
    fusion_analysis = GenreNormalizer.analyze_genre_fusion_validity(case)
    
    print(f"   Validez: {fusion_analysis['validity']}")
    print(f"   G√©neros originales: {fusion_analysis.get('original_genres', [])}")
    print(f"   G√©neros normalizados: {fusion_analysis.get('normalized_genres', [])}")
    
    if 'fusion_info' in fusion_analysis:
        info = fusion_analysis['fusion_info']
        print(f"   üéØ FUSI√ìN DETECTADA:")
        print(f"      G√©nero h√≠brido: {info['fusion_genre']}")
        print(f"      Validez musical: {info['validity']}")
        print(f"      Ejemplos reales: {', '.join(info['examples'])}")
        print(f"      Recomendaci√≥n: {info['recommendation']}")
    
    print(f"\n3Ô∏è‚É£ NORMALIZACI√ìN TRADICIONAL:")
    traditional = GenreNormalizer.normalize_multi_genre_string(case)
    for genre, score in traditional.items():
        print(f"   ‚Ä¢ {genre}: {score:.2f}")
    
    print(f"\n4Ô∏è‚É£ NORMALIZACI√ìN CON AN√ÅLISIS DE FUSI√ìN:")
    fusion_result = GenreNormalizer.normalize_multi_genre_string_with_fusion_analysis(case)
    fusion_analysis_info = fusion_result.pop('_fusion_analysis', None)
    
    for genre, score in fusion_result.items():
        print(f"   ‚Ä¢ {genre}: {score:.2f}")
    
    print(f"\nüìä COMPARACI√ìN:")
    print(f"   Tradicional: {len(traditional)} g√©neros")
    print(f"   Con fusi√≥n: {len(fusion_result)} g√©neros")
    
    if 'Nu Metal' in fusion_result:
        print(f"   ‚úÖ Sistema detect√≥ y aplic√≥ g√©nero de fusi√≥n (Nu Metal)")
    else:
        print(f"   ‚ÑπÔ∏è Sistema mantuvo g√©neros individuales")

def test_musical_reasoning():
    """Prueba el razonamiento musical detr√°s del an√°lisis."""
    print("\n\nüéº RAZONAMIENTO MUSICAL")
    print("=" * 30)
    
    case = "Heavy Metal; Hip-Hop; Punk Rock"
    
    print("üé∏ Heavy Metal:")
    print("   ‚Ä¢ Guitarras distorsionadas y pesadas")
    print("   ‚Ä¢ Ritmos poderosos y driving")
    print("   ‚Ä¢ Energ√≠a muy alta")
    print("   ‚Ä¢ Or√≠genes: Rock, Blues")
    
    print("\nüé§ Hip-Hop:")
    print("   ‚Ä¢ Beats y sampling")
    print("   ‚Ä¢ Vocals rappeados")
    print("   ‚Ä¢ Ritmos sincopados")
    print("   ‚Ä¢ Or√≠genes: Funk, Soul, Disco")
    
    print("\n‚ö° Punk Rock:")
    print("   ‚Ä¢ Estructura directa y agresiva")
    print("   ‚Ä¢ Energ√≠a muy alta")
    print("   ‚Ä¢ Actitud rebelde")
    print("   ‚Ä¢ Or√≠genes: Rock, Garage Rock")
    
    print("\nüîÑ FUSI√ìN RESULTANTE:")
    fusion_analysis = GenreNormalizer.analyze_genre_fusion_validity(case)
    if 'fusion_info' in fusion_analysis:
        info = fusion_analysis['fusion_info']
        print(f"   üéØ {info['fusion_genre']}")
        print(f"   üìù Combina: Guitarras metal + rap vocals + actitud punk")
        print(f"   üéµ Ejemplos hist√≥ricos: {', '.join(info['examples'])}")
        print(f"   ‚úÖ Validez musical confirmada")
    
    print("\nüí° CONCLUSI√ìN:")
    print("   La combinaci√≥n Heavy Metal + Hip-Hop + Punk Rock es")
    print("   musicalmente V√ÅLIDA y se materializa como Nu Metal,")
    print("   un g√©nero h√≠brido real con ejemplos hist√≥ricos.")

if __name__ == "__main__":
    test_fusion_analysis_integration()
    test_specific_case_detailed()
    test_musical_reasoning() 