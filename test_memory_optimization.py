#!/usr/bin/env python3
"""
Script de prueba para validar las optimizaciones de memoria.
Prueba el procesamiento de m√°s de 50 archivos para verificar que no se congele.
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path
import logging

# Agregar el directorio src al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

from src.core.memory_optimizer import get_memory_optimizer, MemoryConfig
from src.gui.threads.task_queue import TaskQueue
from src.gui.threads.processing_thread import ProcessingThread

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_test_files(count: int, temp_dir: Path) -> list:
    """Crea archivos MP3 de prueba."""
    test_files = []
    
    # Usar un archivo MP3 existente como base si existe
    sample_file = None
    for ext in ['*.mp3']:
        existing_files = list(project_root.rglob(ext))
        if existing_files:
            sample_file = existing_files[0]
            break
    
    for i in range(count):
        test_file = temp_dir / f"test_file_{i:03d}.mp3"
        
        if sample_file and sample_file.exists():
            # Copiar archivo existente
            shutil.copy2(sample_file, test_file)
        else:
            # Crear archivo ficticio
            with open(test_file, 'wb') as f:
                # Escribir cabecera MP3 b√°sica
                f.write(b'\xff\xe0')  # MP3 sync word
                f.write(b'\x00' * 1024)  # Datos ficticios
        
        test_files.append(str(test_file))
    
    return test_files

def test_memory_optimizer():
    """Prueba el optimizador de memoria."""
    logger.info("=== PRUEBA DEL OPTIMIZADOR DE MEMORIA ===")
    
    optimizer = get_memory_optimizer()
    
    # Probar configuraci√≥n para diferentes n√∫meros de archivos
    test_cases = [10, 50, 100, 200]
    
    for file_count in test_cases:
        config = optimizer.optimize_for_file_count(file_count)
        logger.info(f"Configuraci√≥n para {file_count} archivos:")
        logger.info(f"  - Batch size: {config.batch_size}")
        logger.info(f"  - Max active tasks: {config.max_active_tasks}")
        logger.info(f"  - Memory cleanup interval: {config.memory_cleanup_interval}")
        logger.info(f"  - GC threshold: {config.gc_threshold}")
        logger.info(f"  - Max memory MB: {config.max_memory_mb}")
        
    # Probar monitoreo de memoria
    memory_status = optimizer.monitor_memory_pressure()
    logger.info(f"Estado de memoria: {memory_status}")
    
    return True

def test_task_queue_optimization():
    """Prueba las optimizaciones del TaskQueue."""
    logger.info("=== PRUEBA DEL TASKQUEUE OPTIMIZADO ===")
    
    # Crear TaskQueue con l√≠mite de tareas
    task_queue = TaskQueue(max_active_tasks=20)
    
    # Funci√≥n de prueba simple
    def dummy_task(value):
        return f"result_{value}"
    
    # Agregar muchas tareas
    tasks = []
    for i in range(50):
        task = task_queue.add_task(f"task_{i}", dummy_task, i)
        tasks.append(task)
    
    logger.info(f"Tareas activas: {task_queue.get_active_tasks_count()}")
    logger.info(f"Tareas pendientes: {task_queue.get_pending_tasks_count()}")
    
    # Simular completar algunas tareas
    for i in range(10):
        task = tasks[i]
        task_queue.complete_task(task, result=f"completed_{i}")
    
    logger.info(f"Despu√©s de completar 10 tareas:")
    logger.info(f"Tareas activas: {task_queue.get_active_tasks_count()}")
    
    # Probar limpieza forzada
    cleaned = task_queue.force_cleanup()
    logger.info(f"Tareas limpiadas: {cleaned}")
    logger.info(f"Tareas activas despu√©s de limpieza: {task_queue.get_active_tasks_count()}")
    
    return True

def test_processing_thread_memory_limit():
    """Prueba el ProcessingThread con muchos archivos."""
    logger.info("=== PRUEBA DE PROCESSINGTHREAD CON L√çMITE DE MEMORIA ===")
    
    # Crear directorio temporal
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # Crear 60 archivos de prueba (m√°s que el l√≠mite problem√°tico de 55)
        file_count = 60
        logger.info(f"Creando {file_count} archivos de prueba...")
        test_files = create_test_files(file_count, temp_path)
        
        # Crear ProcessingThread con optimizaciones
        logger.info("Creando ProcessingThread optimizado...")
        
        # Mock del modelo para pruebas
        class MockModel:
            def process(self, filepath, confidence, max_genres, rename_files, chunk_size=8192):
                # Simular procesamiento
                import time
                time.sleep(0.01)  # Simular trabajo
                return {
                    "written": True,
                    "detected_genres": {"test_genre": 0.85},
                    "message": "Archivo procesado correctamente"
                }
        
        mock_model = MockModel()
        
        processing_thread = ProcessingThread(
            file_paths=test_files,
            model=mock_model,
            confidence=0.3,
            max_genres=3,
            rename_files=False
        )
        
        # Verificar configuraci√≥n optimizada
        logger.info(f"Batch size configurado: {processing_thread.batch_size}")
        logger.info(f"Memory cleanup interval: {processing_thread.memory_cleanup_interval}")
        logger.info(f"Max active tasks: {processing_thread.task_queue.max_active_tasks}")
        
        # Simular procesamiento sin ejecutar realmente
        logger.info("Configuraci√≥n optimizada aplicada correctamente")
        
        return True

def main():
    """Funci√≥n principal de pruebas."""
    logger.info("üöÄ INICIANDO PRUEBAS DE OPTIMIZACI√ìN DE MEMORIA")
    
    try:
        # Prueba 1: Optimizador de memoria
        success1 = test_memory_optimizer()
        logger.info(f"‚úÖ Optimizador de memoria: {'√âXITO' if success1 else 'FALLO'}")
        
        # Prueba 2: TaskQueue optimizado
        success2 = test_task_queue_optimization()
        logger.info(f"‚úÖ TaskQueue optimizado: {'√âXITO' if success2 else 'FALLO'}")
        
        # Prueba 3: ProcessingThread con l√≠mite de memoria
        success3 = test_processing_thread_memory_limit()
        logger.info(f"‚úÖ ProcessingThread optimizado: {'√âXITO' if success3 else 'FALLO'}")
        
        # Resumen
        all_success = success1 and success2 and success3
        logger.info("=" * 60)
        logger.info(f"üéØ RESULTADO FINAL: {'‚úÖ TODAS LAS PRUEBAS EXITOSAS' if all_success else '‚ùå ALGUNAS PRUEBAS FALLARON'}")
        
        if all_success:
            logger.info("üéâ Las optimizaciones de memoria est√°n funcionando correctamente")
            logger.info("üí° Ahora deber√≠as poder procesar m√°s de 55 archivos sin problemas")
        
        return 0 if all_success else 1
        
    except Exception as e:
        logger.error(f"‚ùå Error durante las pruebas: {e}", exc_info=True)
        return 1

if __name__ == "__main__":
    sys.exit(main()) 