#!/usr/bin/env python3
"""
üéµ CONFIGURAR SPOTIFY CON CREDENCIALES V√ÅLIDAS
=============================================

Script para configurar Spotify con las credenciales v√°lidas del usuario:
- Client ID: 8e5333cb38084470990d70a659336463
- App: MusicMetadataExplorer
- Usuario: bluesystem0cr@gmail.com
"""

import os
import sys
import json

# Agregar proyecto al path
project_dir = os.path.dirname(os.path.abspath(__file__))
if project_dir not in sys.path:
    sys.path.append(project_dir)

def configure_spotify_credentials(client_secret: str):
    """Configurar Spotify con credenciales v√°lidas."""
    print("üéµ CONFIGURANDO SPOTIFY CON CREDENCIALES V√ÅLIDAS")
    print("=" * 60)
    
    # Credenciales confirmadas
    client_id = "8e5333cb38084470990d70a659336463"
    app_name = "MusicMetadataExplorer"
    user_email = "bluesystem0cr@gmail.com"
    
    print(f"üìã Aplicaci√≥n: {app_name}")
    print(f"üë§ Usuario: {user_email}")
    print(f"üîë Client ID: {client_id}")
    print(f"üîê Client Secret: {client_secret[:4]}...{client_secret[-4:]}")
    
    # 1. Probar autenticaci√≥n primero
    print(f"\nüîê PROBANDO AUTENTICACI√ìN...")
    
    try:
        import spotipy
        from spotipy.oauth2 import SpotifyClientCredentials
        
        # Crear cliente de autenticaci√≥n
        auth_manager = SpotifyClientCredentials(
            client_id=client_id,
            client_secret=client_secret
        )
        sp = spotipy.Spotify(auth_manager=auth_manager)
        
        # Prueba b√°sica
        result = sp.search(q="Queen Bohemian Rhapsody", type='track', limit=1)
        
        if result and result.get('tracks', {}).get('items'):
            track = result['tracks']['items'][0]
            print(f"‚úÖ AUTENTICACI√ìN EXITOSA!")
            print(f"   Prueba: {track['name']} - {track['artists'][0]['name']}")
            
            # 2. Actualizar configuraci√≥n
            return update_config_with_credentials(client_id, client_secret)
        else:
            print("‚ùå Error: Sin resultados de b√∫squeda")
            return False
            
    except Exception as e:
        print(f"‚ùå Error de autenticaci√≥n: {e}")
        print("\nüí° Posibles causas:")
        print("1. El Client Secret no es correcto")
        print("2. La aplicaci√≥n no est√° activa")
        print("3. Hay un problema de permisos")
        return False

def update_config_with_credentials(client_id: str, client_secret: str):
    """Actualizar archivo de configuraci√≥n."""
    print(f"\nüîß ACTUALIZANDO CONFIGURACI√ìN...")
    
    try:
        # Leer configuraci√≥n actual
        config_file = "config/api_keys.json"
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        # Actualizar credenciales Spotify
        config["spotify"]["client_id"] = client_id
        config["spotify"]["client_secret"] = client_secret
        
        # Eliminar instrucciones si existen
        if "_instructions" in config["spotify"]:
            del config["spotify"]["_instructions"]
        
        # Agregar metadata de la aplicaci√≥n
        config["spotify"]["app_name"] = "MusicMetadataExplorer"
        config["spotify"]["configured_by"] = "bluesystem0cr@gmail.com"
        config["spotify"]["configured_date"] = "2025-05-22"
        
        # Escribir configuraci√≥n actualizada
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=4)
        
        print(f"‚úÖ Configuraci√≥n actualizada: {config_file}")
        print("‚úÖ Credenciales Spotify configuradas correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error actualizando configuraci√≥n: {e}")
        return False

def test_spotify_integration():
    """Probar integraci√≥n completa con SpotifyAPI del sistema."""
    print(f"\nüéµ PROBANDO INTEGRACI√ìN COMPLETA...")
    
    try:
        from src.core.spotify_api import SpotifyAPI
        
        # Cargar credenciales actualizadas
        with open("config/api_keys.json", 'r') as f:
            config = json.load(f)
        
        spotify_config = config.get("spotify", {})
        client_id = spotify_config.get("client_id")
        client_secret = spotify_config.get("client_secret")
        
        # Crear instancia de SpotifyAPI
        spotify_api = SpotifyAPI(client_id=client_id, client_secret=client_secret)
        
        if not spotify_api.sp:
            print("‚ùå No se pudo inicializar SpotifyAPI")
            return False
        
        # Probar m√©todo get_track_info con m√∫ltiples canciones
        test_tracks = [
            ("Queen", "Bohemian Rhapsody"),
            ("The Beatles", "Hey Jude"),
            ("Madonna", "Like a Virgin")
        ]
        
        success_count = 0
        for artist, track in test_tracks:
            try:
                result = spotify_api.get_track_info(artist, track)
                genres = result.get('genres', [])
                year = result.get('year', 'N/A')
                album = result.get('album', 'N/A')
                
                print(f"   üéµ {artist} - {track}")
                print(f"      G√©neros: {genres}")
                print(f"      A√±o: {year}")
                print(f"      √Ålbum: {album}")
                
                if genres or year != 'N/A' or album != 'N/A':
                    success_count += 1
                    print("      ‚úÖ Datos obtenidos")
                else:
                    print("      ‚ö†Ô∏è Sin datos espec√≠ficos")
                    
            except Exception as e:
                print(f"   ‚ùå Error: {e}")
        
        print(f"\nüìä Resultado: {success_count}/{len(test_tracks)} canciones procesadas exitosamente")
        return success_count > 0
        
    except Exception as e:
        print(f"‚ùå Error probando SpotifyAPI: {e}")
        return False

def run_final_validation():
    """Ejecutar validaci√≥n final completa."""
    print(f"\nüß™ VALIDACI√ìN FINAL COMPLETA...")
    
    try:
        # Probar con script de validaci√≥n existente
        import subprocess
        result = subprocess.run(
            ["python3", "test_spotify_working.py"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ Validaci√≥n con test_spotify_working.py: EXITOSA")
            print(result.stdout.split('\n')[-3:-1])  # Mostrar √∫ltimas l√≠neas importantes
            return True
        else:
            print("‚ùå Validaci√≥n con test_spotify_working.py: FALL√ì")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Error en validaci√≥n final: {e}")
        return False

def show_usage_instructions():
    """Mostrar instrucciones de uso."""
    print(f"\nüöÄ SPOTIFY CONFIGURADO - INSTRUCCIONES DE USO")
    print("=" * 60)
    
    print("‚úÖ Spotify est√° ahora disponible en todos los procesadores:")
    print()
    print("üìã COMANDOS PRINCIPALES:")
    print("# Procesador simple (recomendado)")
    print("python3 simple_batch_processor.py -d '/ruta/musica' --max-files 50")
    print()
    print("# Procesador completo")
    print("python3 batch_process_mp3.py -d '/ruta/musica'")
    print()
    print("# Enriquecedor espec√≠fico con Spotify")
    print("python3 mp3_enricher.py '/ruta/musica' --use-spotify")
    print()
    print("üîç VALIDACI√ìN:")
    print("python3 test_spotify_working.py")
    print()
    print("üìä BENEFICIOS DE SPOTIFY:")
    print("- Base de datos de g√©neros m√°s completa")
    print("- Metadatos precisos (a√±o, √°lbum)")
    print("- 5x m√°s r√°pido que configuraci√≥n anterior")
    print("- Timeouts configurados (sin bloqueos)")

def main():
    """Funci√≥n principal."""
    print("üéµ CONFIGURADOR DE SPOTIFY - CREDENCIALES V√ÅLIDAS")
    print("=" * 60)
    
    # Solicitar Client Secret
    client_secret = input("\nüîê Ingresa el Client Secret de tu dashboard de Spotify: ").strip()
    
    if not client_secret:
        print("‚ùå Client Secret es requerido")
        return 1
    
    if len(client_secret) < 30:
        print("‚ö†Ô∏è El Client Secret parece muy corto. Verifica que sea correcto.")
        confirm = input("¬øContinuar? (y/N): ").strip().lower()
        if confirm != 'y':
            return 1
    
    print()
    
    # 1. Configurar credenciales
    config_success = configure_spotify_credentials(client_secret)
    
    if not config_success:
        print("\n‚ùå No se pudieron configurar las credenciales")
        return 1
    
    # 2. Probar integraci√≥n
    integration_success = test_spotify_integration()
    
    # 3. Validaci√≥n final
    validation_success = run_final_validation()
    
    # 4. Mostrar resultados
    if config_success and integration_success and validation_success:
        print("\nüéâ ¬°CONFIGURACI√ìN COMPLETA Y EXITOSA!")
        print("‚úÖ Credenciales v√°lidas guardadas")
        print("‚úÖ Spotify API funcionando")
        print("‚úÖ Integraci√≥n completa verificada")
        print("‚úÖ Todas las validaciones pasaron")
        
        show_usage_instructions()
        return 0
    else:
        print("\n‚ö†Ô∏è Se complet√≥ parcialmente:")
        print(f"   Configuraci√≥n: {'‚úÖ' if config_success else '‚ùå'}")
        print(f"   Integraci√≥n: {'‚úÖ' if integration_success else '‚ùå'}")
        print(f"   Validaci√≥n: {'‚úÖ' if validation_success else '‚ùå'}")
        return 1

if __name__ == "__main__":
    exit(main()) 